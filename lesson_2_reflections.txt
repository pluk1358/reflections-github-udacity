Question 1: What happens when you initialize a repository? Why do you need to do it?

Answer: It create ".git" folder, which contains metadata for backup things
(with "commit" command)

Question 2: How is the staging area different from the working directory and the repository? What value do you think it offers?

Answer: Staging area means area for prepare file or any change from working
directory to commit to repository. that's mean you can select what file or
any change in each commit.

Question 3: How can you use the staging area to make sure you have one commit per logical change?

Answer: ...

Question 4: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Answer: When you want to change file differently but don't want to ruined
current code. You can branch them and make change it.

Question 5: How do the diagrams help you visualize the branch structure?

Answer: It makes you know where each commit is reachable.

Question 6: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Answer: let define  1) B1 and B2 for each branch prepare to merge.
                    2) A1 for ancester of B1 and B2

the result is   1) If B1 and A1 have data(1) but B2 haven't, then merging
version haven't that data.
                2) If B1 and B2 have A1, merging version have it too.
                3) If B1 or B2 haven't A1 data, then merging version have that
data.

Question 7: What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Answer: Git's automatic merging
            pro:    1) make merging commit time faster.
                    2) make sure you don't forget file, line of code etc. when
you  merging
            con:    1) sometimes make conflict merging.
                    2) make code less readablility for add something not
useful (It's my own opinion)
        Manual merging
            pro:    1) avoid conflict merging.
                    2) maintain readablily of code. (It's my own opinion.)
            con:    1) waste time on commit
                    2) you must know what you want to merging.



